/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AppAppIndexRouteImport } from './routes/app/app.index'
import { Route as AppAppMetricsRouteImport } from './routes/app/app.metrics'
import { Route as AppAppHomeRouteImport } from './routes/app/app.home'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AppAppIndexRoute = AppAppIndexRouteImport.update({
  id: '/app/app/',
  path: '/app/app/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppAppMetricsRoute = AppAppMetricsRouteImport.update({
  id: '/app/app/metrics',
  path: '/app/app/metrics',
  getParentRoute: () => rootRouteImport,
} as any)
const AppAppHomeRoute = AppAppHomeRouteImport.update({
  id: '/app/app/home',
  path: '/app/app/home',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/app/app/home': typeof AppAppHomeRoute
  '/app/app/metrics': typeof AppAppMetricsRoute
  '/app/app': typeof AppAppIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/app/app/home': typeof AppAppHomeRoute
  '/app/app/metrics': typeof AppAppMetricsRoute
  '/app/app': typeof AppAppIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/login': typeof LoginRoute
  '/app/app/home': typeof AppAppHomeRoute
  '/app/app/metrics': typeof AppAppMetricsRoute
  '/app/app/': typeof AppAppIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/app/app/home' | '/app/app/metrics' | '/app/app'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/app/app/home' | '/app/app/metrics' | '/app/app'
  id: '__root__' | '/login' | '/app/app/home' | '/app/app/metrics' | '/app/app/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LoginRoute: typeof LoginRoute
  AppAppHomeRoute: typeof AppAppHomeRoute
  AppAppMetricsRoute: typeof AppAppMetricsRoute
  AppAppIndexRoute: typeof AppAppIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/app/': {
      id: '/app/app/'
      path: '/app/app'
      fullPath: '/app/app'
      preLoaderRoute: typeof AppAppIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/app/metrics': {
      id: '/app/app/metrics'
      path: '/app/app/metrics'
      fullPath: '/app/app/metrics'
      preLoaderRoute: typeof AppAppMetricsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/app/home': {
      id: '/app/app/home'
      path: '/app/app/home'
      fullPath: '/app/app/home'
      preLoaderRoute: typeof AppAppHomeRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  LoginRoute: LoginRoute,
  AppAppHomeRoute: AppAppHomeRoute,
  AppAppMetricsRoute: AppAppMetricsRoute,
  AppAppIndexRoute: AppAppIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
